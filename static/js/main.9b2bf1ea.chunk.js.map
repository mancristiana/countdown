{"version":3,"sources":["components/counter/CounterDisplay.module.css","components/randomImage/RandomImage.module.css","components/header/Header.module.css","components/counter/CounterUnit.module.css","shared/Color.context.js","components/counter/CounterUnit.jsx","shared/Color.service.js","shared/Time.service.js","components/counter/CounterDisplay.jsx","components/counter/Counter.jsx","shared/Unsplash.service.js","components/randomImage/RandomImage.jsx","components/header/Header.jsx","App.jsx","serviceWorker.js","index.js","App.module.css"],"names":["module","exports","flex","image","header","container","number","unit","ColorContext","React","createContext","color","setColor","CounterUnit","_ref","hexcolor","useContext","style","background","parseInt","substr","react_default","a","createElement","className","styles","Units","getDurationFromNow","endDate","startDate","startMoment","moment","endMoment","duration","diff","seconds","minutes","hours","days","Math","floor","asDays","getDuration","CounterDisplay","counter_CounterUnit","Counter","_useState","useState","_useState2","Object","slicedToArray","setDuration","useEffect","interval","setInterval","clearInterval","counter_CounterDisplay","api","axios","create","baseURL","headers","Authorization","_callee","query","response","regenerator_default","wrap","_context","prev","next","get","concat","sent","abrupt","data","t0","console","error","urls","full","stop","this","RandomImage","setImage","_x","_getRandomPhoto","apply","arguments","getRandomPhoto","then","src","alt","children","App","app","Provider","value","randomImage_RandomImage","counter","Header","counter_Counter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b2bf1ea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"flex\":\"CounterDisplay_flex__Kgl9b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"RandomImage_image__1sm4H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1nNrV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CounterUnit_container___OVO6\",\"number\":\"CounterUnit_number__3vu56\",\"unit\":\"CounterUnit_unit__1hEW2\"};","import React from 'react';\r\n\r\nexport const ColorContext = React.createContext({\r\n  color: '#000',\r\n  setColor: () => {}\r\n});\r\n","import React, { useContext } from 'react';\r\nimport styles from './CounterUnit.module.css';\r\nimport { getContrast } from '../../shared/Color.service';\r\nimport { ColorContext } from '../../shared/Color.context';\r\n\r\nconst CounterUnit = ({ unit, number }) => {\r\n  const { color } = useContext(ColorContext);\r\n  const style = {\r\n    background: color,\r\n    color: getContrast(color)\r\n  };\r\n  return (\r\n    <div className={styles.container} style={style}>\r\n      <div className={styles.number}>{number}</div>\r\n      <div className={styles.unit}>{unit}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CounterUnit;\r\n","export function getContrast(hexcolor) {\r\n  const r = parseInt(hexcolor.substr(1, 2), 16);\r\n  const g = parseInt(hexcolor.substr(3, 2), 16);\r\n  const b = parseInt(hexcolor.substr(5, 2), 16);\r\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\r\n  return yiq >= 128 ? 'black' : 'white';\r\n}\r\n","import moment from 'moment';\r\n\r\nexport const Units = {\r\n  Days: 'days',\r\n  Hours: 'hours',\r\n  Minutes: 'minutes',\r\n  Seconds: 'seconds'\r\n};\r\n\r\nexport function getNow() {\r\n  return moment();\r\n}\r\n\r\nexport function getDuration(startDate, endDate) {\r\n  const startMoment = moment(startDate);\r\n  const endMoment = moment(endDate);\r\n  let duration = moment.duration(endMoment.diff(startMoment));\r\n  return {\r\n    seconds: duration.seconds(),\r\n    minutes: duration.minutes(),\r\n    hours: duration.hours(),\r\n    days: Math.floor(duration.asDays())\r\n  };\r\n}\r\n\r\nexport function getDurationFromNow(endDate) {\r\n  return getDuration(getNow(), endDate);\r\n}\r\n","import React from 'react';\r\nimport styles from './CounterDisplay.module.css';\r\nimport CounterUnit from './CounterUnit';\r\nimport { Units } from '../../shared/Time.service';\r\n\r\nconst CounterDisplay = ({ days, hours, minutes, seconds }) => (\r\n  <div className={styles.flex}>\r\n    <CounterUnit unit={Units.Days} number={days} />\r\n    <CounterUnit unit={Units.Hours} number={hours} />\r\n    <CounterUnit unit={Units.Minutes} number={minutes} />\r\n    <CounterUnit unit={Units.Seconds} number={seconds} />\r\n  </div>\r\n);\r\n\r\nexport default CounterDisplay;\r\n","import React, { useState, useEffect } from 'react';\r\nimport CounterDisplay from './CounterDisplay';\r\nimport { getDurationFromNow } from './../../shared/Time.service';\r\n\r\nconst Counter = ({ endDate }) => {\r\n  const [duration, setDuration] = useState(getDurationFromNow(endDate));\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setDuration(getDurationFromNow(endDate));\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return <CounterDisplay {...duration} />;\r\n};\r\n\r\nexport default Counter;\r\n","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'https://api.unsplash.com',\r\n  headers: { Authorization: 'Client-ID 042454a26c390216eda97edd0c96560ecb88b5753a79bb740dc8283b7a7d665b' }\r\n});\r\n\r\nexport async function getRandomPhoto(query) {\r\n  try {\r\n    const response = await api.get(`/photos/random?query=${query}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return {\r\n      color: '#CACEE3',\r\n      urls: {\r\n        full: 'https://images.unsplash.com/photo-1493606371202-6275828f90f3?ixlib=rb-1.2.1&q=85&fm=jpg&crop=entropy&cs=srgb&ixid=eyJhcHBfaWQiOjU4MTUwfQ'\r\n      }\r\n    };\r\n  }\r\n}\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport styles from './RandomImage.module.css';\r\n\r\nimport { getRandomPhoto } from '../../shared/Unsplash.service';\r\nimport { ColorContext } from '../../shared/Color.context';\r\n\r\nconst RandomImage = () => {\r\n  const [image, setImage] = useState('');\r\n  const { setColor } = useContext(ColorContext);\r\n  useEffect(() => {\r\n    getRandomPhoto('home').then(({ urls, color }) => {\r\n      setImage(urls.full);\r\n      setColor(color);\r\n    });\r\n  }, []);\r\n\r\n  return <img src={image} className={styles.image} alt=\"logo\" />;\r\n};\r\n\r\nexport default RandomImage;\r\n","import React, { useContext } from 'react';\r\nimport styles from './Header.module.css';\r\nimport { ColorContext } from '../../shared/Color.context';\r\n\r\nconst CounterUnit = ({ children }) => {\r\n  const { color } = useContext(ColorContext);\r\n  return (\r\n    <div className={styles.header} style={{ color }}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CounterUnit;\r\n","import React, { useState } from 'react';\r\nimport styles from './App.module.css';\r\n\r\nimport Counter from './components/counter/Counter';\r\nimport RandomImage from './components/randomImage/RandomImage';\r\nimport Header from './components/header/Header';\r\n\r\nimport { ColorContext } from './shared/Color.context';\r\n\r\nconst App = () => {\r\n  const [color, setColor] = useState('#fff');\r\n  return (\r\n    <div className={styles.app}>\r\n      <ColorContext.Provider value={{ color, setColor }}>\r\n        <RandomImage />\r\n        <div className={styles.counter}>\r\n          <Header>Christmas in</Header>\r\n          <Counter endDate={'2019-12-24'} />\r\n        </div>\r\n      </ColorContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1PUK8\",\"counter\":\"App_counter__3RDqS\"};"],"sourceRoot":""}